---
import carLeft from "@/assets/car-left.png";
import carRight from "@/assets/car-right.png";
import Apex from "@/assets/apex.svg";
import Header from "../Header.astro";
import draftLeft from "@/assets/draft-left.png";
import draftRight from "@/assets/draft-right.png";
---

<div class="relative h-screen overflow-hidden">
  <div class="absolute inset-0 z-20">
    <Header />
  </div>
  <div
    class="absolute inset-0 flex h-full w-full flex-col items-center justify-center"
  >
    <img
      src={carLeft.src}
      alt="car"
      class="absolute h-12 opacity-0 sm:h-auto"
      id="animated-car-left"
    />
    <img
      src={draftLeft.src}
      alt="draft"
      class="absolute h-6 opacity-0 sm:h-12"
      id="animated-draft-left"
    />
    <Apex
      class="animate-fade-in h-auto w-full max-w-lg px-8 py-24 text-white opacity-0 delay-1000"
      id="animated-apex"
    />
    <img
      src={carRight.src}
      alt="car"
      class="absolute h-12 opacity-0 sm:h-auto"
      id="animated-car-right"
    />
    <img
      src={draftRight.src}
      alt="draft"
      class="absolute h-6 opacity-0 sm:h-12"
      id="animated-draft-right"
    />
  </div>
</div>
<script>
  const carLeft = document.getElementById("animated-car-left")!;
  const carRight = document.getElementById("animated-car-right")!;
  const draftLeft = document.getElementById("animated-draft-left")!;
  const draftRight = document.getElementById("animated-draft-right")!;
  const apex = document.getElementById("animated-apex")!;

  const updatePositions = (reload: boolean = false) => {
    const carLeftProps = carLeft.getBoundingClientRect();
    const carRightProps = carRight.getBoundingClientRect();
    const draftLeftProps = draftLeft.getBoundingClientRect();
    const draftRightProps = draftRight.getBoundingClientRect();
    const apexProps = apex.getBoundingClientRect();

    // Function to adjust vertical positions for scroll
    const adjustForScroll = (y: number) => {
      return y + window.scrollY;
    }

    console.log(adjustForScroll(apexProps.top));

    // Calculate vertical positions relative to the Apex logo
    const carLeftTop = adjustForScroll(apexProps.top) - carLeftProps.height;
    const carRightTop = adjustForScroll(apexProps.bottom);
    const draftLeftTop =
      carLeftTop + (carLeftProps.height - draftLeftProps.height) / 2;
    const draftRightTop =
      carRightTop + (carRightProps.height - draftRightProps.height) / 2;

    // Set vertical positions
    carLeft.style.top = `${carLeftTop}px`;
    carRight.style.top = `${carRightTop}px`;
    draftLeft.style.top = `${draftLeftTop}px`;
    draftRight.style.top = `${draftRightTop}px`;

    // Set horizontal positions
    carLeft.style.left = `${-carLeftProps.width}px`;
    carRight.style.left = `${window.innerWidth + carRightProps.width}px`;
    draftLeft.style.left = `${-draftLeftProps.width - carLeftProps.width}px`;
    draftRight.style.left = `${window.innerWidth + 2 * carRightProps.width}px`;

    const deltaXLeft = window.innerWidth / 2 + carLeftProps.width / 2;
    const deltaXRight = -window.innerWidth / 2 - (carRightProps.width * 3) / 2;

    carLeft.style.transition = reload
      ? "transform 0s ease-in-out"
      : "transform 1s ease-in-out";
    carLeft.style.transform = `translateX(${deltaXLeft}px)`;
    carRight.style.transition = reload
      ? "transform 0s ease-in-out"
      : "transform 1s ease-in-out";
    carRight.style.transform = `translateX(${deltaXRight}px)`;
    draftLeft.style.transition = reload
      ? "transform 0s ease-in-out"
      : "transform 1s ease-in-out";
    draftLeft.style.transform = `translateX(${deltaXLeft}px)`;
    draftRight.style.transition = reload
      ? "transform 0s ease-in-out"
      : "transform 1s ease-in-out";
    draftRight.style.transform = `translateX(${deltaXRight}px)`;
  };

  const startAnimation = () => {
    carLeft.style.opacity = "1";
    carRight.style.opacity = "1";
    draftLeft.style.opacity = "1";
    draftRight.style.opacity = "1";
    updatePositions();
  };

  // Listen for the splash screen completion event
  window.addEventListener("load", startAnimation);

  // Also handle resize events
  window.addEventListener("resize", () => updatePositions(true));
</script>
